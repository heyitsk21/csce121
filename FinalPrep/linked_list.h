/*
Do not edit this file.
This file is NOT to be submitted.
If submitted, it will be ignored during grading.

All methods declared here are assumed to be provided (so you can use them in your submitted code; if you want to use them in your own tests, you must implement them yourself)
EXCEPT * LinkedList::at
       * LinkedList::insert
       * LinkedList::merge
which you must implement in linked_list.cpp
*/

#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <cstdlib>
#include <iostream>

struct Node {
  int value;
  Node* next;

  Node(int value = 0);  // constructs a node with the value and nullptr next
};

class LinkedList {
  Node* head;

 public:
  LinkedList();  // constructs an empty list
  size_t size() const;  // returns the number of elements in the list
  const Node* get_head() const;  // returns the head of the list (for testing)

  /*
  __________________   ____________   ______________     ____________
  |                |  /            \  |             \   /            \
  |______    ______| /     ____     \ |    _____     \ /     ____     \
        |    |       |    /    \    | |    |    \    | |    /    \    |
        |    |       |    |    |    | |    |    |    | |    |    |    |
        |    |       |    |    |    | |    |    |    | |    |    |    |
        |    |       |    \____/    | |    |____/    | |    \____/    |
        |    |       \              / |              / \              /
        |____|        \____________/  |_____________/   \____________/
  */
  // TODO(student): you must implement these methods in linked_list.cpp
  int at(size_t index) const;  // returns the value at the index
  void insert(size_t index, int value);  // inserts the value at the index
  void merge(const LinkedList& other);  // merges the other list into this list
};

#endif  // LINKED_LIST_H
